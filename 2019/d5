#!/usr/bin/python3.8

import re
import sys
import inspect
from collections import defaultdict
from copy import deepcopy

code = []

if len(sys.argv) > 1:
    path = sys.argv[1]
else:
    path = 'input-d5.txt'

f = open(path, "r")
src = f.read()
src.replace('\n', '')
code = [int(n) for n in src.split(',')]

#print(code)

class BaseInstruction:

    def __init__(self, memory, ip):
        n = memory[ip]
        self.opcode = n % 100
        self.immediate_params = set()
        for i, pm in enumerate(str(n)[-3::-1]):
            if pm == '1':
                self.immediate_params.add(i)
        self.params = [memory[ip+1+i] for i in range(self.PARAMS_NUM)]

    def __repr__(self):
        return f"{self.__class__.__name__}(params={self.params})"

    def get_param(self, n, memory):
        if n in self.immediate_params:
            return self.params[n]
        else:
            return memory[self.params[n]]

    def set_param(self, n, v, memory):
        memory[self.params[n]] = v


class StopInstruction(BaseInstruction):
    OPCODE = 99
    PARAMS_NUM = 0

    def execute(self, memory, input, output):
        raise StopIteration()


class BaseMathInstruction(BaseInstruction):
    PARAMS_NUM = 3

    def calculate(self, a, b):
        raise NotImplementedError()

    def execute(self, memory, input, output):
        a = self.get_param(0, memory)
        b = self.get_param(1, memory)
        self.set_param(2, self.calculate(a, b), memory)


class AddInstruction(BaseMathInstruction):
    OPCODE = 1

    def calculate(self, a, b):
        return a + b


class MulInstruction(BaseMathInstruction):
    OPCODE = 2

    def calculate(self, a, b):
        return a * b


class ReadInstruction(BaseInstruction):
    OPCODE = 3
    PARAMS_NUM = 1

    def execute(self, memory, input, output):
        if len(input) == 0:
            raise RuntimeError("Trying to read from empty input")
        v = input.pop(0)
        self.set_param(0, v, memory)


class WriteInstruction(BaseInstruction):
    OPCODE = 4
    PARAMS_NUM = 1

    def execute(self, memory, input, output):
        output.append(self.get_param(0, memory))


class JumpIfTrueInstruction(BaseInstruction):
    OPCODE = 5
    PARAMS_NUM = 2

    def execute(self, memory, input, output):
        if self.get_param(0, memory) != 0:
            return self.get_param(1, memory)
        else:
            return None


class JumpIfFalseInstruction(BaseInstruction):
    OPCODE = 6
    PARAMS_NUM = 2

    def execute(self, memory, input, output):
        if self.get_param(0, memory) == 0:
            return self.get_param(1, memory)
        else:
            return None


class LessThanInstruction(BaseInstruction):
    OPCODE = 7
    PARAMS_NUM = 3

    def execute(self, memory, input, output):
        if self.get_param(0, memory) < self.get_param(1, memory):
            self.set_param(2, 1, memory)
        else:
            self.set_param(2, 0, memory)


class EqualsInstruction(BaseInstruction):
    OPCODE = 8
    PARAMS_NUM = 3

    def execute(self, memory, input, output):
        if self.get_param(0, memory) == self.get_param(1, memory):
            self.set_param(2, 1, memory)
        else:
            self.set_param(2, 0, memory)


def instruction_from_code(memory, ip):
    n = memory[ip]
    opcode = n % 100

    for name, cls in inspect.getmembers(sys.modules[__name__], inspect.isclass):
        if issubclass(cls, BaseInstruction) and not name.startswith('Base'):
            if cls.OPCODE == opcode:
                return cls(memory, ip)
    raise Exception(f"Instruction not found: {n}")


class Computer:
    def __init__(self, memory):
        self.memory = deepcopy(memory)
        self.input = []
        self.output = []

    def run(self):
        self.ip = 0
        while True:
            try:
                ins = instruction_from_code(self.memory, self.ip)
                #print(f"ip={self.ip}, executing {ins}")
                new_ip = ins.execute(self.memory, self.input, self.output)
                if new_ip is None:
                    self.ip += ins.PARAMS_NUM + 1
                else:
                    self.ip = new_ip
            except StopIteration:
                break

# Part 
comp = Computer(code)
comp.input = [1]
comp.run()
#print(comp.memory)
print(comp.output[-1])

comp = Computer(code)
comp.input = [5]
comp.run()
#print(comp.memory)
print(comp.output[-1])
