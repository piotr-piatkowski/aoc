#!/usr/bin/python3

from aoc.tools import *
from itertools import permutations, combinations, product
import networkx as nx

timer = Timer()

def run(args):

    timer.start()
    M = set()
    for y, line in enumerate(read_lines(args)):
        for x, c in enumerate(line):
            if c == 'S':
                start = complex(x, y)
            elif c == 'E':
                end = complex(x, y)
            if c != '#':
                M.add(complex(x, y))
    W = y + 1
    H = x + 1

    timer.lap("parse")

    G = nx.Graph()

    for p in M:
        for d in C_HV_DIRS:
            if p + d in M:
                G.add_edge(p, p+d)

    normal = nx.shortest_path_length(G, start, end)

    timer.lap("graph")

    spl = { # shortest path lengths from start and end
        start: {},
        end: {}
    }
    for src in (start, end):
        for p, length in nx.single_source_shortest_path_length(G, src).items():
            spl[src][p] = length

    timer.lap("shortest paths")

    def neighbours(M, p):
        for dx in range(-20, 21):
            abs_dx = abs(dx)
            for dy in range(-(20-abs_dx), 21-abs_dx):
                p2 = p + complex(dx, dy)
                if p2 in M:
                    yield (p2, abs_dx + abs(dy))


    part1 = 0
    part2 = 0
    max_path = normal - 100
    for p1 in M:
        max_path_rest = max_path - spl[start][p1]
        for p2, d in neighbours(M, p1):
            if spl[end][p2] + d <= max_path_rest:
                part2 += 1
                if d <= 2:
                    part1 += 1

    print(part1)
    print(part2)

    timer.lap(f"solve")
    timer.stop()

main(run)
