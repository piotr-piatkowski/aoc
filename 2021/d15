#!/usr/bin/python3.8

import sys
import os
import re
import argparse
import math
import time
import heapq
from collections import defaultdict
from itertools import permutations
from copy import deepcopy

debug = False

def dbg(s):
    if debug:
        print(s)

def pr(P, always=False):
    if debug or always:
        x0 = min(p[0] for p in P)
        x1 = max(p[0] for p in P)
        y0 = min(p[1] for p in P)
        y1 = max(p[1] for p in P)

        for y in range(y0, y1+1):
            vals = []
            for x in range(x0, x1+1):
                if (x,y) in P:
                    v = '#'
                else:
                    v = '.'
                vals.append(v)
            print(' '.join(vals))
        print()


def neighb(P, x, y):
    n = []
    for dx in range(-1, 2):
        for dy in range(-1, 2):
            if dx != 0 or dy != 0:
                xx = x+dx
                yy = y+dy
                if (xx, yy) in P:
                    n.append((xx, yy))
    return n

def neighb4(P, x, y):
    n = []
    for xx, yy in [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]:
        if (xx, yy) in P:
            n.append((xx, yy))
    return n


def run(args):

    f = open(args.path, "r")
    G = {}
    for x, line in enumerate(f):
        for y, r in enumerate(line.strip()):
            r = int(r)
            G[x,y] = r

    X = max(k[0] for k in G.keys())
    Y = max(k[1] for k in G.keys())

    for x in range(X+1):
        for y in range(Y+1):
            r = G[x,y]
            for i in range(5):
                for j in range(5):
                    G[x+i*(X+1), y+j*(Y+1)] = ((r-1)+i+j) % 9 + 1

    Q = []
    for pos, v in G.items():
        G[pos] = [99999999, pos, G[pos], None]

    G[0, 0] = [0, (0, 0), 0, None]

    Q = [G[0,0]]

    while Q:
        print(len(Q))
        dist, pos, risk, prev = heapq.heappop(Q)
        for pp in neighb4(G, *pos):
            dist2, pos2, risk2, prev2 = G[pp]
            if prev2 is None or dist2 > dist + risk2:
                G[pp][0] = dist + risk2
                G[pp][3] = pos
                heapq.heappush(Q, G[pp])
        #print(G)

    X = max(k[0] for k in G.keys())
    Y = max(k[1] for k in G.keys())

    print(G[(X, Y)])

def main():
    script_name = os.path.basename(__file__)

    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', action='store_true',
            help='Enable debug')
    parser.add_argument('path', nargs='?',# default=f'input-{script_name}.txt',
            help='Path to the input file')

    args = parser.parse_args()
    global debug
    debug = args.debug
    run(args)

main()
