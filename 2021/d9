#!/usr/bin/python3.8

import sys
import os
import re
import argparse
import math
from collections import defaultdict
from itertools import permutations
from copy import deepcopy

debug = False

def dbg(s):
    if debug:
        print(s)

def run(args):

    f = open(args.path, "r")
    P = {}
    for x, line in enumerate(f):
        for y, d in enumerate(line.strip()):
            P[x,y] = int(d)

    def is_low(x,y):
        v = P[x,y]
        for xx, yy in ((x+1, y), (x, y+1), (x-1, y), (x, y-1)):
            if (xx, yy) in P and P[xx, yy] <= v:
                return False
        dbg(f"Found min {v=} at {xx=} {yy=}")
        return True

    def size(x, y, vis=set()):
        if P.get((x,y), 10) >= 9 or (x,y) in vis:
            return 0
        vis.add((x,y))
        s = 1
        for xx, yy in ((x+1, y), (x, y+1), (x-1, y), (x, y-1)):
            s += size(xx, yy, vis)
        return s

    s = 0
    sizes = []
    for xx, yy in P.keys():
        if is_low(xx, yy):
            s += P[xx, yy] + 1
            sz = size(xx, yy)
            dbg(f"{xx=} {yy=} {sz=}")
            sizes.append(sz)

    print(s)
    sizes.sort()
    print(math.prod(sizes[-3:]))


def main():
    script_name = os.path.basename(__file__)

    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', action='store_true',
            help='Enable debug')
    parser.add_argument('path', nargs='?', default=f'input-{script_name}.txt',
            help='Path to the input file')

    args = parser.parse_args()
    global debug
    debug = args.debug
    run(args)

main()
