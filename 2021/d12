#!/usr/bin/python3.8

import sys
import os
import re
import argparse
import math
import time
from collections import defaultdict, Counter
from itertools import permutations
from copy import deepcopy

debug = False

def dbg(s):
    if debug:
        print(s)

def count_paths(G, path, extra_visit_allowed, extra_visit_used):
    c = 0
    dbg(f"{path=}")
    for nn in G[path[-1]]:
        if nn == 'end':
            dbg(f"FOUND: {path + ['end']}")
            c += 1
        elif nn == 'start':
            continue
        else:
            extra_needed = False
            if nn.islower() and nn in path:
                if extra_visit_allowed and not extra_visit_used:
                    extra_needed = True
                else:
                    continue
            c += count_paths(G, path + [nn], extra_visit_allowed,
                             extra_visit_used or extra_needed)
    return c

def run(args):

    f = open(args.path, "r")
    G = defaultdict(list)
    for line in f:
        p1, p2 = line.strip().split('-')
        G[p1].append(p2)
        G[p2].append(p1)

    for part in (1, 2):
        print(count_paths(G, ['start'], part == 2, False))


def main():
    script_name = os.path.basename(__file__)

    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', action='store_true',
            help='Enable debug')
    parser.add_argument('path', nargs='?', default=f'input-{script_name}.txt',
            help='Path to the input file')

    args = parser.parse_args()
    global debug
    debug = args.debug
    run(args)

main()
