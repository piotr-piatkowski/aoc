#!/usr/bin/python3.8

import sys
import os
import re
import argparse
import math
import time
import heapq
from collections import defaultdict
from itertools import permutations
from copy import deepcopy
from termcolor import colored

debug = False

def dbg(s):
    if debug:
        print(s)

def pr(P, padding=None, colors={}, color_sets=[], always=False, clear=False):
    if debug or always:
        x0 = min(p[0] for p in P)
        x1 = max(p[0] for p in P)
        y0 = min(p[1] for p in P)
        y1 = max(p[1] for p in P)

        if padding is None:
            if type(P) is set:
                padding = 2
            else:
                padding = max(len(str(v)) for v in P.values()) + 1

        graph = ''
        for y in range(y0, y1+1):
            vals = []
            for x in range(x0, x1+1):
                if type(P) is set:
                    if (x,y) in P:
                        v = '#'
                    else:
                        v = '.'
                else:
                    v = P.get((x,y), ' ')
                v = str(v).rjust(padding)
                if c := colors.get((x,y)):
                    v = colored(v, c)
                else:
                    for cs, col in color_sets:
                        if (x,y) in cs:
                            v = colored(v, col)
                            break

                vals.append(v)
            graph += ''.join(vals) + '\n'

        if clear:
            print(chr(27) + "[2J", end='')
            print(chr(27) + "[H", end='')

        print(graph)


def neighb(P, x, y, diag):
    n = [
        (x+1, y),
        (x-1, y),
        (x, y+1),
        (x, y-1)
    ]
    if diag:
        n += [
            (x+1, y+1),
            (x+1, y-1),
            (x-1, y+1),
            (x-1, y-1)
        ]
    return [p for p in n if p in P]

def neighb8(P, x, y):
    return neighb(P, x, y, diag=True)

def neighb4(P, x, y):
    return neighb(P, x, y, diag=False)

def shortest_path(G, start, end):

    dist_dict = defaultdict(lambda: float('inf'))
    prev_dict = defaultdict(lambda: None)
    visited = {start}

    Q = [(0, start, None)]

    while Q and end not in visited:
        dist, pos, prev = heapq.heappop(Q)
        for p in neighb4(G, *pos):
            if p not in visited:
                best_dist = dist_dict[p]
                risk = G[p]
                if dist + risk < best_dist:
                    dist_dict[p] = dist + risk
                    prev_dict[p] = pos
                    heapq.heappush(Q, (dist_dict[p], p, pos))
            visited.add(p)

        if debug:
            p = pos
            path = set()
            while p != start:
                path.add(p)
                p = prev_dict[p]

            color_sets=[
                ({start}, 'red'),
                ({end}, 'green'),
                (path, 'yellow'),
                (visited, 'grey')
            ]
            pr(G, clear=True, color_sets=color_sets)
            print(f"current path len: {dist}")

    return dist_dict[end]

def bin2dec(b):
    return int(b, 2)

def get_packets(bins):
    packs = []
    while len(bins) >= 6:
        bins, p = get_next_packet(bins)
        dbg(f"next packet: {p}")
        packs.append(p)
    return packs

def get_next_packet(bins):
    global vsum
    dbg(f"{bins=}")

    if len(bins) < 6:
        dbg("EMPTY!")
        return '', None

    ver = bin2dec(bins[:3])
    pid = bin2dec(bins[3:6])
    bins = bins[6:]

    dbg(f"{ver=} {pid=} {bins=}")
    vsum += ver

    if pid == 4:
        n = 0
        while bins:
            f, dig = bins[0], bins[1:5]
            bins = bins[5:]
            n = n * 16 + bin2dec(dig)
            if f == '0':
                break
        return bins, ("NUM", ver, pid, n)
    else:
        subpacks = []
        if bins[0] == '0':
            totlen = bin2dec(bins[1:16])
            bins = bins[16:]
            dbg(f"{totlen=}")
            sbins = bins[:totlen]
            bins = bins[totlen:]
            while sbins:
                dbg(f"subpack next")
                sbins, p = get_next_packet(sbins)
                subpacks.append(p)
        else:
            pnum = bin2dec(bins[1:12])
            bins = bins[12:]
            dbg(f"{pnum=}")
            for i in range(pnum):
                dbg(f"subpack {i}")
                bins, p = get_next_packet(bins)
                dbg(f"RET: {bins=} {p=}")
                subpacks.append(p)
        return bins, ("OP", ver, pid, subpacks)

def eval_packet(p):
    name, ver, pid, v = p

    if pid == 0:
        return sum(eval_packet(pp) for pp in v)
    elif pid == 1:
        return math.prod(eval_packet(pp) for pp in v)
    elif pid == 2:
        return min(eval_packet(pp) for pp in v)
    elif pid == 3:
        return max(eval_packet(pp) for pp in v)
    elif pid == 4:
        return v
    elif pid == 5:
        return int(bool(eval_packet(v[0]) > eval_packet(v[1])))
    elif pid == 6:
        return int(bool(eval_packet(v[0]) < eval_packet(v[1])))
    elif pid == 7:
        return int(bool(eval_packet(v[0]) == eval_packet(v[1])))
    else:
        raise Exception(f"{pid=}")

vsum = 0

def run(args):
    global vsum

    f = open(args.path, "r")
    data = f.readline().strip()

    bins = eval(f'bin(0x{data})')[2:]
    while len(bins) % 4 != 0:
        bins = '0' + bins

    vsum = 0
    packs = get_packets(bins)

    print(vsum)
    assert len(packs) == 1
    print(eval_packet(packs[0]))

def main():
    script_name = os.path.basename(__file__)

    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', action='store_true',
            help='Enable debug')
    parser.add_argument('path', nargs='?', default=f'input-{script_name}.txt',
            help='Path to the input file')

    args = parser.parse_args()
    global debug
    debug = args.debug
    run(args)

main()
