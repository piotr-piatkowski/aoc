#!/usr/bin/python3.8

import sys
import os
import re
import argparse
import math
import time
import heapq
from collections import defaultdict
from itertools import permutations
from copy import deepcopy
from termcolor import colored

debug = False

def dbg(s):
    if debug:
        print(s)

def bin2dec(b):
    return int(b, 2)

def get_next_packet(bins):
    global vsum
    dbg(f"{bins=}")

    if len(bins) < 6:
        dbg("EMPTY!")
        return '', None

    ver = bin2dec(bins[:3])
    pid = bin2dec(bins[3:6])
    bins = bins[6:]

    dbg(f"{ver=} {pid=} {bins=}")
    vsum += ver

    if pid == 4:
        n = 0
        while bins:
            f, dig = bins[0], bins[1:5]
            bins = bins[5:]
            n = n * 16 + bin2dec(dig)
            if f == '0':
                break
        return bins, ("NUM", ver, pid, n)
    else:
        subpacks = []
        if bins[0] == '0':
            totlen = bin2dec(bins[1:16])
            bins = bins[16:]
            dbg(f"{totlen=}")
            sbins = bins[:totlen]
            bins = bins[totlen:]
            while sbins:
                dbg(f"subpack next")
                sbins, p = get_next_packet(sbins)
                subpacks.append(p)
        else:
            pnum = bin2dec(bins[1:12])
            bins = bins[12:]
            dbg(f"{pnum=}")
            for i in range(pnum):
                dbg(f"subpack {i}")
                bins, p = get_next_packet(bins)
                dbg(f"RET: {bins=} {p=}")
                subpacks.append(p)
        return bins, ("OP", ver, pid, subpacks)

def eval_packet(p):
    name, ver, pid, v = p

    if pid != 4:
        vals = [eval_packet(pp) for pp in v]

    if pid == 0:
        return sum(vals)
    elif pid == 1:
        return math.prod(vals)
    elif pid == 2:
        return min(vals)
    elif pid == 3:
        return max(vals)
    elif pid == 4:
        return v
    elif pid == 5:
        return int(bool(vals[0] > vals[1]))
    elif pid == 6:
        return int(bool(vals[0] < vals[1]))
    elif pid == 7:
        return int(bool(vals[0] == vals[1]))
    else:
        raise Exception(f"{pid=}")

def run(args):
    global vsum

    f = open(args.path, "r")
    data = f.readline().strip()

    bins = eval(f'bin(0x{data})')[2:]
    while len(bins) % 4 != 0:
        bins = '0' + bins

    vsum = 0
    _, pack = get_next_packet(bins)

    dbg(f"{pack=}")

    print(vsum)

    print(eval_packet(pack))

def main():
    script_name = os.path.basename(__file__)

    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', action='store_true',
            help='Enable debug')
    parser.add_argument('path', nargs='?', default=f'input-{script_name}.txt',
            help='Path to the input file')

    args = parser.parse_args()
    global debug
    debug = args.debug
    run(args)

main()
