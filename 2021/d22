#!/usr/bin/python3.8

import sys
import os
import re
import argparse
import math
import time
import heapq
from collections import defaultdict
from itertools import permutations
from copy import deepcopy

debug = False

def dbg(s):
    if debug:
        print(s)

def fill_world(cubes):
    mins = [min(c[0][i] for c in cubes) for i in range(3)]
    maxs = [max(c[1][i] for c in cubes) for i in range(3)]
    sizes = [maxs[i] - mins[i] + 1 for i in range(3)]

    world = bytearray(sizes[0] * sizes[1] * sizes[2])

    for i, cube in enumerate(cubes):
        dbg(f"TODO: {len(cubes) - i}")
        xyz1 = cube[0]
        xyz2 = cube[1]
        for x in range(xyz1[0], xyz2[0]):
            x -= mins[0]
            for y in range(xyz1[1], xyz2[1]):
                y -= mins[1]
                for z in range(xyz1[2], xyz2[2]):
                    z -= mins[2]
                    off = (x * sizes[1] + y) * sizes[2] + z
                    if cube[2]:
                        world[off] = 1
                    else:
                        world[off] = 0
    return world, sizes

def run(args):

    f = open(args.path, "r")
    cubes1 = []
    cubes2 = []
    pos = [set(), set(), set()]
    for line in f:
        line = line.strip()
        st, coords = line.split(' ')
        xyz1 = []
        xyz2 = []
        init_zone = True
        for i, t in enumerate(coords.split(',')):
            v1, v2 = t[2:].split('..')
            v1 = int(v1)
            v2 = int(v2) + 1
            if v1 < -50 or v2 > 51:
                init_zone = False
            xyz1.append(v1)
            xyz2.append(v2)
            pos[i].add(v1)
            pos[i].add(v2)

        c = (xyz1, xyz2, st=='on')
        if init_zone:
            cubes1.append(c)
        cubes2.append(c)

    # p1
    world, sizes = fill_world(cubes1)
    print(world.count(1))

    # p2 - map coords on smaller values
    r2s = [{}, {}, {}]
    # map from small coord to its block size
    s2size = [[], [], []]
    for i in range(3):
        posi = sorted(pos[i])
        for j, p in enumerate(posi):
            r2s[i][p] = j
            if j + 1 < len(posi):
                s2size[i].append(posi[j+1] - p)

    def pos_r2s(xyz):
        xyz2 = []
        for i in range(3):
            xyz2.append(r2s[i][xyz[i]])
        return xyz2

    cubes2s = [
        (pos_r2s(cube[0]), pos_r2s(cube[1]), cube[2])
        for cube in cubes2
    ]

    world, sizes = fill_world(cubes2s)

    c = 0
    # For p2 offsets (mins) are always 0 so we can ignore them
    pos = 0
    while True:
        pos = world.find(1, pos)
        if pos < 0:
            break
        # off = (x * sizes[1] + y) * sizes[2] + z
        x = (pos // (sizes[1] * sizes[2]))
        y = (pos // sizes[2]) % sizes[1]
        z = pos % sizes[2]
        c += s2size[0][x] * s2size[1][y] * s2size[2][z]
        pos += 1

    print(c)


def main():
    script_name = os.path.basename(__file__)

    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', action='store_true',
            help='Enable debug')
    parser.add_argument('path', nargs='?', default=f'input-{script_name}.txt',
            help='Path to the input file')

    args = parser.parse_args()
    global debug
    debug = args.debug
    run(args)

main()
