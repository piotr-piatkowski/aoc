#!/usr/bin/python3.8

import sys
import os
import re
import argparse
import math
import time
import heapq
from collections import defaultdict
from itertools import permutations
from copy import deepcopy
from termcolor import colored

debug = False

def dbg(s):
    if debug:
        print(s)

def pr(P, padding=None, colors={}, color_sets=[], always=False, clear=False):
    if debug or always:
        x0 = min(p[0] for p in P)
        x1 = max(p[0] for p in P)
        y0 = min(p[1] for p in P)
        y1 = max(p[1] for p in P)

        if padding is None:
            if type(P) is set:
                padding = 2
            else:
                padding = max(len(str(v)) for v in P.values()) + 1

        graph = ''
        for y in range(y0, y1+1):
            vals = []
            for x in range(x0, x1+1):
                if type(P) is set:
                    if (x,y) in P:
                        v = '#'
                    else:
                        v = '.'
                else:
                    v = P.get((x,y), ' ')
                v = str(v).rjust(padding)
                if c := colors.get((x,y)):
                    v = colored(v, c)
                else:
                    for cs, col in color_sets:
                        if (x,y) in cs:
                            v = colored(v, col)
                            break

                vals.append(v)
            graph += ''.join(vals) + '\n'

        if clear:
            print(chr(27) + "[2J", end='')
            print(chr(27) + "[H", end='')

        print(graph)

def run(args):

    f = open(args.path, "r")
    G = {}
    algo = f.readline().strip()

    f.readline() # empty

    for y, line in enumerate(f):
        for x, r in enumerate(line.strip()):
            G[x,y] = r

    xmax = max(k[0] for k in G.keys())
    ymax = max(k[1] for k in G.keys())

    pr(G)

    default = '.'

    for i in range(50):

        G2 = {}

        for x in range(-i-1, xmax+i+2):
            for y in range(-i-1, ymax+i+2):
                ns = ''
                for yy in range(-1,2):
                    for xx in range(-1,2):
                        v = G.get((x+xx, y+yy), default)
                        ns += {
                            '#': '1',
                            '.': '0',
                        }[v]
                G2[(x,y)] = algo[int(ns, 2)]
        if default == '.':
            default = algo[int("0"*9, 2)]
        else:
            default = algo[int("1"*9, 2)]

        G = G2
        dbg(f"After {i=}")
        pr(G)

        if i + 1 in (2, 50):
            print(len(list(v for v in G.values() if v == '#')))

def main():
    script_name = os.path.basename(__file__)

    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', action='store_true',
            help='Enable debug')
    parser.add_argument('path', nargs='?', default=f'input-{script_name}.txt',
            help='Path to the input file')

    args = parser.parse_args()
    global debug
    debug = args.debug
    run(args)

main()
