#!/usr/bin/python3

import sys
import os
import re
import argparse
from collections import defaultdict
from copy import deepcopy

debug = False

def dbg(*s):
    if debug:
        print(*s)

DIRS = {
    "R": (1, 0),
    "U": (0, 1),
    "L": (-1, 0),
    "D": (0, -1)
}

def draw(cyc, x):
    cyc = cyc - 1
    cyc = cyc % 40
    if cyc % 40 == 0:
        print('')
    if cyc < x - 1 or cyc > x + 1:
        print('.',end='')
    else:
        print('#',end='')

NWW = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19

class Monkey:
    def __init__(self, inp):
        self.throw = {True: None, False: None}
        m = re.match(r'Monkey (\d+):', inp[0])
        assert m, inp
        self.id = int(m.group(1))
        for l in inp[1:]:
            l = l.strip()
            if m := re.match(r'Starting items: (.*)', l):
                self.items = [int(i) for i in m.group(1).split(',')]
            elif m := re.match(r'Operation: new = (.*)', l):
                self.op = eval(f"lambda old: {m.group(1)}")
            elif m := re.match(r'Test: divisible by (\d+)', l):
                self.div = int(m.group(1))
            elif m := re.match(r'If true: throw to monkey (\d+)', l):
                self.throw[True] = int(m.group(1))
            elif m := re.match(r'If false: throw to monkey (\d+)', l):
                self.throw[False] = int(m.group(1))
            else:
                assert False, l
        self.count = 0

    def __repr__(self):
        return str(self.__dict__)

    def process(self, monkeys, part, nww):
        items = self.items
        self.items = []
        for it in items:
            lvl = self.op(it)
            if part == 1:
                lvl = lvl // 3
            else:
                lvl = lvl % nww
            target = self.throw[lvl % self.div == 0]
            monkeys[target].items.append(lvl)
            self.count += 1


def run(args):

    f = open(args.path, "r")
    mdata = f.read().split('\n\n')

    monkeys = []
    for md in mdata:
        monkeys.append(Monkey(md.splitlines()))

    # p1
    for i in range(20):
        for m in monkeys:
            m.process(monkeys, 1, 0)
    res = sorted([m.count for m in monkeys])
    print(res[-1] * res[-2])

    # p2
    monkeys = []
    for md in mdata:
        monkeys.append(Monkey(md.splitlines()))
    nww = 1
    for m in monkeys:
        nww *= m.div
    for i in range(10000):
        for m in monkeys:
            m.process(monkeys, 2, nww)
    res = sorted([m.count for m in monkeys])
    print(res[-1] * res[-2])


def main():
    script_name = os.path.basename(__file__)

    if m := re.match(r'(d\d+)a', script_name):
        script_name = m.group(1)

    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', action='store_true',
            help='Enable debug')
    parser.add_argument('path', nargs='?', default=f'input-{script_name}.txt',
            help='Path to the input file')

    args = parser.parse_args()
    global debug
    debug = args.debug
    run(args)

main()
