#!/usr/bin/python3

import sys
import os
import re
import argparse
import functools
import itertools
import random
import time
from collections import defaultdict
from copy import deepcopy, copy
from functools import cmp_to_key


debug = False

def dbg(*s):
    if debug:
        print(*s)

NONE = ''
ORE = 'ore'
CLAY = 'clay'
OBSIDIAN = 'obs'
GEODE = 'geo'
ALL = [GEODE, OBSIDIAN, CLAY, ORE]

dp_cache = {}

def find_best(bpid, costs, robots, resources, tt):

    dpkey = hash((bpid, tuple(robots.items()), tuple(resources.items()), tt))
    if dpkey in dp_cache:
        return dp_cache[dpkey]

    # Is it possible to build any geode robot before end of time?
    # Just a rough estimation, as this is only optimization
    max_res = copy(resources)
    for res in ALL:
        # assume we build new robot each minute, as wee need only
        # lower bound
        max_res[res] += (tt-1)*robots[res] + (tt-1)*(tt-2)//2
    can_build = True
    for res, n in costs[GEODE].items():
        if max_res[res] < n:
            can_build = False

    if not can_build:
        ret = tt*robots[GEODE]
        dp_cache[dpkey] = ret
        return ret

    def mins_to_build_rob(rob):
        max_tt = 0
        for res, n in costs[rob].items():
            if resources[res] < n:
                if robots[res] == 0:
                    return 0
                else:
                    needed = n - resources[res]
                    if needed % robots[res] == 0:
                        tt = needed // robots[res]
                    else:
                        tt = needed // robots[res] + 1
                    if tt > max_tt:
                        max_tt = tt
        return max_tt + 1

    best = tt * robots[GEODE]
    if tt > 0:
        times = {r: mins_to_build_rob(r) for r in ALL}
        times = {k: v for k, v in times.items() if v > 0 and v < tt}
        # If GEODE is the one we can build fastest, do it and skip other options
        if GEODE in times and times[GEODE] <= min(t for t in times.values()):
            options = [GEODE]
        else:
            options = ALL
        for rob in options:
            # Which robot would you like to build next?
            if rob in times:
                mm = times[rob]
                new_resources = copy(resources)
                for res, n in robots.items():
                    new_resources[res] += mm * n
                for res, n in costs[rob].items():
                    new_resources[res] -= n
                new_robots = copy(robots)
                new_robots[rob] += 1
                res = find_best(bpid, costs, new_robots, new_resources, tt - mm)
                n = robots[GEODE] * mm + res
                if n > best:
                    best = n

    if tt > 20:
        dbg(f"Best sol for {tt=}: {best}")
    ret = best
    dp_cache[dpkey] = ret
    return ret

def run(args):

    for p in (1, 2):
        r = 0 if p == 1 else 1
        f = open(args.path, "r")
        for line in f:
            words = line.split()
            bpid = int(words[1][:-1])
            costs = {}
            costs[ORE] = {ORE: int(words[6])}
            costs[CLAY] = {ORE: int(words[12])}
            costs[OBSIDIAN] = {ORE: int(words[18]), CLAY: int(words[21])}
            costs[GEODE] = {ORE: int(words[27]), OBSIDIAN: int(words[30])}

            resources = defaultdict(int)
            robots = defaultdict(int)
            robots[ORE] = 1
            dbg(f"{bpid=} ...")
            res = find_best(bpid, costs, robots, resources, 24 if p == 1 else 32)
            dbg(f"{res=}")
            if p == 1:
                r += bpid * res
            else:
                r *= res
            if p == 2 and  bpid == 3:
                break
            dp_cache.clear()
        print(r)


def main():
    script_name = os.path.basename(__file__)

    if m := re.match(r'(d\d+).*', script_name):
        script_name = m.group(1)

    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', action='store_true',
            help='Enable debug')
    parser.add_argument('path', nargs='?', default=f'input-{script_name}.txt',
            help='Path to the input file')

    args = parser.parse_args()
    global debug
    debug = args.debug

    run(args)

main()
