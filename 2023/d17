#!/usr/bin/python3

import sys
import os
import re
import argparse
import itertools
import functools
import math
import time
from collections import defaultdict
from queue import PriorityQueue
from copy import deepcopy
from sympy import symbols, solve
from math import floor, ceil
from functools import cmp_to_key
from colorama import Fore, Back, Style

debug = False
# For pypy
functools.cache = functools.lru_cache(maxsize=None)

def dbg(s):
    if debug:
        print(s)

def draw(G, path):
    xmax = max([x for x,y in G.keys()])
    ymax = max([y for x,y in G.keys()])
    for yy in range(ymax+1):
        for xx in range(xmax+1):
            if (xx,yy) in path:
                print(Fore.GREEN, end='')
            print(G[xx,yy], end='')
            print(Style.RESET_ALL, end='')
        print()
    print()

# Order matters! Each next dir should be rotated 90 degrees clockwise
DIRS = {
    'N': (0, -1),
    'E': (1, 0),
    'S': (0, 1),
    'W': (-1, 0),
}

def run(args):

    # laziness ;-)
    sys.setrecursionlimit(20000)

    f = open(args.path, "r")
    lines = f.read().splitlines()

    G = defaultdict(lambda: ' ')
    
    for y, l in enumerate(lines):
        for x, c in enumerate(l):
            G[x,y] = int(lines[y][x])

    xmax = max([x for x,y in G.keys()])
    ymax = max([y for x,y in G.keys()])

    def neighbours(pos):
        x, y = pos
        for dx, dy in DIRS.values():
            nx = x + dx
            ny = y + dy
            if (nx,ny) in G:
                yield nx, ny

    def solve(G, start, end, minpath, maxpath):
        Q = PriorityQueue()
        DIST = defaultdict(lambda: math.inf)
        PREV = defaultdict(lambda: None)

        # DIST and PREV keys are tuples of (post, path) where path
        # is a tuple of up to maxpath previous positions

        DIST[start, ()] = 0
        Q.put((0, start, ()))

        def delta(p1, p2):
            return (p2[0] - p1[0], p2[1] - p1[1])

        def valid_path(path, pos, npos):
            if not path:
                return True
            nd = delta(pos, npos)
            ld = delta(path[-1], pos)

            c = 1
            for i in range(len(path) - 1, 0, -1):
                if delta(path[i-1], path[i]) != ld:
                    break
                c += 1

            if nd == ld: # going same direction
                v = (c + 1 <= maxpath)
            else: # going different direction
                v = (c >= minpath or c == len(path))

            # If going into end, we must have at least minpath
            if npos == end:
                v = v and (nd == ld and c + 1 >= minpath)

            return v

        while not Q.empty():
            dist, pos, path = Q.get()
            prev = path[-1] if path else None

            for npos in neighbours(pos):
                npath = (path + (pos,))[-maxpath:]
                nstate = (npos, npath)
                if npos == prev or not valid_path(path, pos, npos):
                    continue
                new_dist = dist + G[npos]
                if DIST[nstate] > new_dist:
                    DIST[nstate] = new_dist
                    PREV[nstate] = (pos, path)
                    Q.put((new_dist, npos, npath))

        end = (xmax, ymax)
        best = math.inf
        bestpath = None
        for pos, path in DIST.keys():
            if pos == end:
                if DIST[pos, path] < best:
                    bestpath = path
                    best = DIST[pos, path]

        path = [end]
        st = (end, bestpath)
        while True:
            ppos, ppath = PREV[st]
            path.append(ppos)
            if ppos == start:
                break
            st = (ppos, ppath)

        return best, path

    start = (0,0)
    end = (xmax, ymax)

    dist, path = solve(G, start, end, 0, 3)
    #draw(G, path)
    print(dist)

    #print("=" * 80)

    dist, path = solve(G, start, end, 4, 10)
    #draw(G, path)
    print(dist)


def main():
    script_name = os.path.basename(__file__)

    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', action='store_true',
            help='Enable debug')
    parser.add_argument('path', nargs='?', default=f'input-{script_name}.txt',
            help='Path to the input file')

    args = parser.parse_args()
    global debug
    debug = args.debug
    run(args)

main()
