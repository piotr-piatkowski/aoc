#!/usr/bin/python3

import sys
import os
import re
import argparse
import itertools
import functools
import math
import time
from collections import defaultdict
from copy import deepcopy
from sympy import symbols, solve
from math import floor, ceil
from functools import cmp_to_key

debug = False
# For pypy
functools.cache = functools.lru_cache(maxsize=None)

def dbg(s):
    if debug:
        print(s)

def draw(G, V):
    xmax = max([x for x,y in G.keys()])
    ymax = max([y for x,y in G.keys()])
    for y in range(ymax+1):
        for x in range(xmax+1):
            if G[x,y] not in ('.', ' '):
                print(G[x,y], end='')
            elif (x,y) in V:
                s = V[x,y]
                if len(s) > 1:
                    print(len(s), end='')
                else:
                    d = list(s)[0]
                    print(d, end='')
            else:
                print('.', end='')
        print()

# Order matters! Each next dir should be rotated 90 degrees clockwise
DIRS = {
    'N': (0, -1),
    'E': (1, 0),
    'S': (0, 1),
    'W': (-1, 0),
}

ROTS = {
    '\\': {
        'N': 'W',
        'S': 'E',
        'W': 'N',
        'E': 'S',
    },
    '/': {
        'N': 'E',
        'S': 'W',
        'E': 'N',
        'W': 'S',
    },
    '|': {
        'N': 'N',
        'S': 'S',
        'E': ['N', 'S'],
        'W': ['N', 'S'],
    },
    '-': {
        'N': ['E', 'W'],
        'S': ['E', 'W'],
        'E': 'E',
        'W': 'W',
    },
}

def run(args):

    # laziness ;-)
    sys.setrecursionlimit(20000)

    f = open(args.path, "r")
    lines = f.read().splitlines()

    G = defaultdict(lambda: ' ')
    
    for y, l in enumerate(lines):
        for x, c in enumerate(l):
            G[x,y] = lines[y][x]

    xmax = max([x for x,y in G.keys()])
    ymax = max([y for x,y in G.keys()])

    V = defaultdict(set)

    def travel(x, y, dir):
        if dir in V[(x,y)]:
            return
        V[(x,y)].add(dir)
        dx, dy = DIRS[dir]
        nx = x + dx
        ny = y + dy
        if (nx, ny) not in G:
            return
        if G[nx, ny] == '.':
            travel(nx, ny, dir)
        else:
            ndir = ROTS[G[nx, ny]][dir]
            if not isinstance(ndir, list):
                ndir = [ndir]
            for nd in ndir:
                travel(nx, ny, nd)

    def count_res(x, y, dir):
        V.clear()
        travel(x, y, dir)
        return len(V) - 1

    print(count_res(-1, 0, 'E'))

    best = 0
    for y in range(0, ymax+1):
        best = max(count_res(-1, y, 'E'), best)
        best = max(count_res(xmax+1, y, 'W'), best)
    for x in range(0, xmax+1):
        V.clear()
        best = max(count_res(x, -1, 'S'), best)
        best = max(count_res(x, ymax+1, 'N'), best)
    print(best)

def main():
    script_name = os.path.basename(__file__)

    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', action='store_true',
            help='Enable debug')
    parser.add_argument('path', nargs='?', default=f'input-{script_name}.txt',
            help='Path to the input file')

    args = parser.parse_args()
    global debug
    debug = args.debug
    run(args)

main()
